{
  "layout": "post",
  "title": "前端单元测试 - 工具使用与运行配置",
  "description": "前端单元测试入门学习，工具的使用以及基础运行配置",
  "keywords": "unit test, chai, mocha, sinon, react, es6",
  "date": "2016-02-06T00:00:00.000Z",
  "categories": "unit-test",
  "bodyContent": "## 用到的测试工具（框架）\n\n> 俗话说：工欲善其事必先利其器。要做好单元测试，必须有一套好的辅助工具。\n\n### Mocha\n\n> [Mocha](http://mochajs.org/) 是一个可以运行在 node 环境与 browser 环境的测试框架，它的作用是一个任务运行器，因此它并不太关心测试本身，而是关心测试的结构，测试的结构决定着怎样让测试知道代码运行失败了以及怎样显示结果。\n\n使用 Mocha 创建代码的方式非常简单，通过使用 `describe` 块来展示你的库（模块）中不同组件（函数），然后在其中添加 `it` 块来制定特殊的测试逻辑。\n\n``` javascript\n\nvar assert = require('assert');\ndescribe('Array', function() {\n    describe('#indexOf()', function () {\n        it('should return -1 when the value is not present', function () {\n            assert.equal(-1, [1,2,3].indexOf(5));\n        });\n    });\n});\n\n```\n\n`备注`：Mocha 本身集成了 `assert` 断言模块，但它允许你使用任何一个你希望使用的断言库，包括 [Chai](http://chaijs.com/)、[should.js](https://github.com/shouldjs/should.js)、[expect.js](https://github.com/Automattic/expect.js) 等。这也正是使用 Mocha 十分灵活的一个地方。在项目中我选择使用 chai 作为断言库。\n\n上面说到了 Mocha 的重点是控制着测试代码的结构以及整个测试的流程，所以 Mocha 也提供了在测试的周期中方便我们控制模拟整个测试流程的一些钩子（Hook）函数。\n\n> Mocha 为我们提供了 before()、after()、beforeEach()、afterEach() 的钩子函数，允许我们在测试代码执行前进行预处理以及代码执行后进行清理工作。\n\n``` javascript\n\ndescribe('Hooks', function() {\n\n    // 当前block --> 当前describe\n\n    before(function() {\n        // runs before all tests in this block\n    });\n\n    after(function() {\n        // runs after all tests in this block\n    });\n\n    beforeEach(function() {\n        // runs before each test in this block\n    });\n\n    afterEach(function() {\n        // runs after each test in this block\n    });\n\n    // test cases\n});\n\n```\n\nMocha 更多的使用细节不在这里展开说明，有需要请看[官方文档](http://mochajs.org/)。\n\n### Chai\n\n> chai 是一个断言库，提供 expect、assert 以及 should 三种断言方式。更多使用细节请看[官方文档](http://chaijs.com/)。\n\n使用 chai 中的 expect 改写上面的例子：\n\n``` javascript\n\nimport { expect } from 'chai';\ndescribe('Array', function() {\n    describe('#indexOf()', function () {\n        it('should return -1 when the value is not present', function () {\n            expect([1,2,3].indexOf(5)).to.equal(-1);\n        });\n    });\n});\n\n```\n\n在使用 should 方式的断言前，需要进行初始化。\n\n``` javascript\n\nimport chai from 'chai';\n\nchai.should();\n\n```\n\nchai 还提供了 use() 的接口，让我们加载基于 chai 的测试插件\n\n``` javascript\n\nimport sinonChai from 'sinon-chai';\nimport chaiAsPromised from 'chai-as-promised';\n\nchai.use(sinonChai);\nchai.use(chaiAsPromised);\n\n```\n\n### Sinon\n\n> 前端开发少不了需要 mock 的情况，这里的 mock 并不单纯代表数据，Sinon 可以为我们 mock 包括函数调用、网络请求、超时、数据库操作等。\n\nsinon 有很多强大的 API，见[官网](http://sinonjs.org/docs/)。在了解如何使用 sinon 时，spy、stub 和 mock 各自的使用场景是最让我感到迷惑的，看了官网的介绍也是一头雾水。这里推荐一篇不错的文章 [Best Practices for Spies, Stubs and Mocks in Sinon.js](https://semaphoreci.com/community/tutorials/best-practices-for-spies-stubs-and-mocks-in-sinon-js)，下面也是通过对这篇文章的简单总结，给出一个使用场景的简单说明：\n\n* sinon.spy()\n\n> spy 允许我们获取函数调用返回的信息，包括调用次数、传入的参数、返回值以及抛出的异常等。这些可以通过 sinon 提供的[断言API](http://sinonjs.org/docs/#assertions)轻松实现。但是，spy 是不会对测试的函数行为造成影响的，如果我们需要修改测试的函数的行为，我们则需要去使用 stub。\n\n* sinon.stub()\n\n> stub 跟 spy 的行为是一致的，而且 stub 可以使用 spy 所拥有的 API。stub 的特殊之处，是允许我们修改函数的行为，即我们可以把测试的函数进行替换。这样，我们让函数返回我们预设的返回值或者异常情况。更多关于 stub 的使用方法请看 [这里](http://sinonjs.org/docs/#stubs)。\n\n* sinon.mock()\n\n> 如果我们需要使用 stub，同时我们需要验证函数多个行为时，我们就应该使用 mock。mock 允许我们通过 verify() 去同时验证函数的多个行为，例如：调用次数、传入参数等。\n\n### Enzyme\n\n> enzyme 是 airbnb 提供的一个用来测试 react 组件的测试工具。由于 enzyme 的 API 是效仿 jQuery 的，所以我们可以按照 jQuery 操作 DOM 的思路去操作我们的 react 组件，进行测试。\n\nenzyme 提供3种基本的使用方法：\n\n* [Shallow Rendering](https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md)\n\n> Enzyme 提供的 shallow 方法，可以让你可以把一个组件当做一个测试单元来看待，确保你的测试代码不会间接的去断言子组件的行为。我们可以通过enzyme提供的 API 去操作子组件来达到我们的测试需求。这个让我们很轻松的去测试组件的渲染逻辑是否正确，结合一些API我们还可以轻松的去模拟用户的行为，测试变化后组件的渲染逻辑。\n\n``` javascript\n\nimport { shallow } from 'enzyme';\n\ndescribe('<MyComponent />', () => {\n\n    it('should render `.icon-star` element', () => {\n        const wrapper = shallow(<MyComponent />);\n        expect(wrapper.find('.icon-star')).to.have.length(1);\n    });\n\n});\n\n```\n`备注`：Mocha 不提倡使用箭头函数（arrow function），因为在箭头函数中，this 会自动与当前的作用域进行绑定，并且不允许修改。如果在回调函数中需要使用 this.timeout(1000) 方法时，会发现 this => undefined。这种情况下请使用普通的匿名函数。\n\n* [JSDOM Full Rendering](https://github.com/airbnb/enzyme/blob/master/docs/api/mount.md)\n\n> Enzyme 提供的 mount 方法适用于，当我们的组件需要与 DOM api 进行交互或者需要测试组件的整个完整的生命周期的情况。它的实现是基于 [jsdom](https://github.com/tmpvar/jsdom)。\n\n``` javascript\n\nimport { mount } from 'enzyme';\n\ndescribe('<Foo />', () => {\n\n    it('calls componentDidMount', () => {\n        spy(Foo.prototype, 'componentDidMount');\n        const wrapper = mount(<Foo />);\n        expect(Foo.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n\n});\n\n```\n\n* [Static Rendered Markup](https://github.com/airbnb/enzyme/blob/master/docs/api/render.md)\n\n> Enzyme 提供的 render 方法可以把我们的 react 组件渲染成静态的 HTML，render 返回的渲染对象 wrapper 与使用 mount、shallow很相似，但是它是基于一个叫做 [Cheerio](https://github.com/cheeriojs/cheerio) 的库。\n\n``` javascript\n\nimport { render } from 'enzyme';\n\ndescribe('<Foo />', () => {\n\n    it('renders three `.foo-bar`s', () => {\n        const wrapper = render(<Foo />);\n        expect(wrapper.find('.foo-bar')).to.have.length(3);\n    });\n\n    it('rendered the title', () => {\n        const wrapper = render(<Foo title=\"unique\" />);\n        expect(wrapper.text()).to.contain(\"unique\");\n    });\n\n});\n\n```\n\n### Istanbul\n\n> Istanbul 是一个帮助我们统计测试覆盖率的工具。\n\n* 安装 istanbul\n\n``` javascript\n\nnpm install istanbul --save-dev\n\n```\n\n* 启动命令\n\n``` javascript\n\n./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha\n\n```\n\n`备注`：上面的命令中使用`_mocha`可以正常输出测试覆盖率的数据，但使用`mocha`则报`No coverage information was collected, exit without writing coverage information`。因为，[mocha 和 _mocha 是两个不同的命令](https://github.com/gotwarlost/istanbul/issues/44)，前者会新建一个进程执行测试，而后者是在当前进程（即 istanbul 所在的进程）执行测试，只有这样， istanbul 才会捕捉到覆盖率数据。其他测试框架也是如此，必须在同一个进程执行测试。下同。\n\n* 为 mocha 传参\n\n``` javascript\n\n./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- test/setupNewUser-spec.js\n\n```\n\n`备注`：上面的命令中 `--` 后面的部分会当做 mocha 的参数被传入，如果不加 `--` 则会作为 istanbul 的参数。\n\n### Isparta + Babel\n\n> Isparta + Babel 可以让我们对使用es2015语法的源代码进行测试覆盖率统计。当然，对于使用非es2015语法的代码也是能够正常使用的。\n\n* 安装 Isparta + Babel\n\n``` javascript\n\nnpm install babel-cli isparta --save-dev\n\n```\n\n* 启动命令\n\n``` javascript\n\n./node_modules/.bin/babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha\n\n```\n\n\n`备注`：在运行以上命令时，可能会报下面的提示\n\n``` javascript\n\nTransformation error; return original code\n{ [Error: Line 1: Unexpected token ILLEGAL]\n  lineNumber: 1,\n  description: 'Unexpected token ILLEGAL',\n  index: 0 }\n\n```\n\n这个提示并不影响测试代码的运行，但是有强迫症的程序员表示看不得有一个错误提示，可以通过添加一个 `.istanbul.yml` 文件进行处理（[#issues 47](https://github.com/douglasduteil/isparta/issues/47#issuecomment-121014224)）\n\n``` javascript\n\n# .istanbul.yml\ninstrumentation:\n  root: src\n\n```\n\n再次运行测试脚本，发现一切都干净了。\n\n* 运行结果截图（自行运行 `example` 目录内的例子或者使用 [`generator-tman`](https://github.com/FrendEr/generator-tman) 初始化项目）\n\n![运行结果](https://raw.githubusercontent.com/FrendEr/blog/gh-pages/images/post/how-to-an-unit-test/result.png)\n\n## 如何启动一个测试\n\n> 以下配置是根据在xxx项目组件需要进行的，技术选型不同配置的方案必然不相同。以下的配置方案是基于：react + es2015。\n\n#### 配置.babelrc\n\n* 安装依赖包\n\n``` javascript\n\nnpm i babel-preset-es2015 babel-preset-react --save-dev\n\n```\n\n* 配置.babelrc\n\n``` javascript\n\n{\n    \"presets\": [\"es2015\", \"react\"]\n}\n\n```\n\n`备注`：在 babel 6.0 以后不再只是 es2015 transpiler，同时也支持 jsx 等语法的编译。我们需要安装相关的 presets 去处理我们的需求。\n\n#### 测试启动命令\n\n* 安装依赖包\n\n``` javascript\n\nnpm i babel-register --save-dev\n\n```\n\n* 执行测试命令\n\n``` javascript\n\nmocha --compilers js:babel-register --recursive\n\n```\n\n这里用到了 `--compilers js:babel-register` —— 允许我们选择编译器，这里对js使用了babel，会自动读取 `.babelrc` 里面的配置；`--recursive` —— 会遍历执行test/目录下所有的测试文件。执行 `mocha -h` 可以查看完整的参数说明。\n\n* 为了使用方便，建议配置在 package.json 里面，通过执行 `npm test` 运行测试\n\n``` javascript\n\n\"scripts\": {\n    \"test\": \"mocha --compilers js:babel-register --recursive\"\n}\n\n```\n\n#### 测试目录以及文件命名\n\n``` javascript\n\n├── package.json\n├── setupNewUser.js\n└── test\n    └── setupNewUser-spec.js\n\n```\n\n上面配置的命令会让 mocha 遍历test/目录下所有的测试文件。在命名上，为了让测试脚本与组件（库）脚本对应起来，一般会这样命名：'组件名字' + '-spec.js' 、 '组件名字' + 'Spec.js'、'组件名字' + '.spec.js'。\n\n\n## 参考资料\n* [Mocha 官网](http://mochajs.org/)\n* [Chai 官网](http://chaijs.com/)\n* [Sinon 官网](http://sinonjs.org/)\n* [Enzyme 官网](http://airbnb.io/enzyme/)\n* [Best Practices for Spies, Stubs and Mocks in Sinon.js](https://semaphoreci.com/community/tutorials/best-practices-for-spies-stubs-and-mocks-in-sinon-js)\n* [Mocha + Chai.js unit testing for ES6 with Istanbul code coverage](https://onsen.io/blog/mocha-chaijs-unit-test-coverage-es6/)\n* [代码覆盖率工具 Istanbul 入门教程](http://www.ruanyifeng.com/blog/2015/06/istanbul.html)",
  "bodyHtml": "<h2>用到的测试工具（框架）</h2>\n<blockquote>\n<p>俗话说：工欲善其事必先利其器。要做好单元测试，必须有一套好的辅助工具。</p>\n</blockquote>\n<h3>Mocha</h3>\n<blockquote>\n<p><a href=\"http://mochajs.org/\">Mocha</a> 是一个可以运行在 node 环境与 browser 环境的测试框架，它的作用是一个任务运行器，因此它并不太关心测试本身，而是关心测试的结构，测试的结构决定着怎样让测试知道代码运行失败了以及怎样显示结果。</p>\n</blockquote>\n<p>使用 Mocha 创建代码的方式非常简单，通过使用 <code>describe</code> 块来展示你的库（模块）中不同组件（函数），然后在其中添加 <code>it</code> 块来制定特殊的测试逻辑。</p>\n<pre><code class=\"hljs\">var assert = require('assert');\ndescribe('Array', function() {\n    describe('#indexOf()', function () {\n        it('should return -1 when the value is not present', function () {\n            assert.equal(-1, [1,2,3].indexOf(5));\n        });\n    });\n});</code></pre><p><code>备注</code>：Mocha 本身集成了 <code>assert</code> 断言模块，但它允许你使用任何一个你希望使用的断言库，包括 <a href=\"http://chaijs.com/\">Chai</a>、<a href=\"https://github.com/shouldjs/should.js\">should.js</a>、<a href=\"https://github.com/Automattic/expect.js\">expect.js</a> 等。这也正是使用 Mocha 十分灵活的一个地方。在项目中我选择使用 chai 作为断言库。</p>\n<p>上面说到了 Mocha 的重点是控制着测试代码的结构以及整个测试的流程，所以 Mocha 也提供了在测试的周期中方便我们控制模拟整个测试流程的一些钩子（Hook）函数。</p>\n<blockquote>\n<p>Mocha 为我们提供了 before()、after()、beforeEach()、afterEach() 的钩子函数，允许我们在测试代码执行前进行预处理以及代码执行后进行清理工作。</p>\n</blockquote>\n<pre><code class=\"hljs\">describe('Hooks', function() {\n\n    // 当前block --&gt; 当前describe\n\n    before(function() {\n        // runs before all tests in this block\n    });\n\n    after(function() {\n        // runs after all tests in this block\n    });\n\n    beforeEach(function() {\n        // runs before each test in this block\n    });\n\n    afterEach(function() {\n        // runs after each test in this block\n    });\n\n    // test cases\n});</code></pre><p>Mocha 更多的使用细节不在这里展开说明，有需要请看<a href=\"http://mochajs.org/\">官方文档</a>。</p>\n<h3>Chai</h3>\n<blockquote>\n<p>chai 是一个断言库，提供 expect、assert 以及 should 三种断言方式。更多使用细节请看<a href=\"http://chaijs.com/\">官方文档</a>。</p>\n</blockquote>\n<p>使用 chai 中的 expect 改写上面的例子：</p>\n<pre><code class=\"hljs\">import { expect } from 'chai';\ndescribe('Array', function() {\n    describe('#indexOf()', function () {\n        it('should return -1 when the value is not present', function () {\n            expect([1,2,3].indexOf(5)).to.equal(-1);\n        });\n    });\n});</code></pre><p>在使用 should 方式的断言前，需要进行初始化。</p>\n<pre><code class=\"hljs\">import chai from 'chai';\n\nchai.should();</code></pre><p>chai 还提供了 use() 的接口，让我们加载基于 chai 的测试插件</p>\n<pre><code class=\"hljs\">import sinonChai from 'sinon-chai';\nimport chaiAsPromised from 'chai-as-promised';\n\nchai.use(sinonChai);\nchai.use(chaiAsPromised);</code></pre><h3>Sinon</h3>\n<blockquote>\n<p>前端开发少不了需要 mock 的情况，这里的 mock 并不单纯代表数据，Sinon 可以为我们 mock 包括函数调用、网络请求、超时、数据库操作等。</p>\n</blockquote>\n<p>sinon 有很多强大的 API，见<a href=\"http://sinonjs.org/docs/\">官网</a>。在了解如何使用 sinon 时，spy、stub 和 mock 各自的使用场景是最让我感到迷惑的，看了官网的介绍也是一头雾水。这里推荐一篇不错的文章 <a href=\"https://semaphoreci.com/community/tutorials/best-practices-for-spies-stubs-and-mocks-in-sinon-js\">Best Practices for Spies, Stubs and Mocks in Sinon.js</a>，下面也是通过对这篇文章的简单总结，给出一个使用场景的简单说明：</p>\n<ul>\n<li>sinon.spy()</li>\n</ul>\n<blockquote>\n<p>spy 允许我们获取函数调用返回的信息，包括调用次数、传入的参数、返回值以及抛出的异常等。这些可以通过 sinon 提供的<a href=\"http://sinonjs.org/docs/#assertions\">断言API</a>轻松实现。但是，spy 是不会对测试的函数行为造成影响的，如果我们需要修改测试的函数的行为，我们则需要去使用 stub。</p>\n</blockquote>\n<ul>\n<li>sinon.stub()</li>\n</ul>\n<blockquote>\n<p>stub 跟 spy 的行为是一致的，而且 stub 可以使用 spy 所拥有的 API。stub 的特殊之处，是允许我们修改函数的行为，即我们可以把测试的函数进行替换。这样，我们让函数返回我们预设的返回值或者异常情况。更多关于 stub 的使用方法请看 <a href=\"http://sinonjs.org/docs/#stubs\">这里</a>。</p>\n</blockquote>\n<ul>\n<li>sinon.mock()</li>\n</ul>\n<blockquote>\n<p>如果我们需要使用 stub，同时我们需要验证函数多个行为时，我们就应该使用 mock。mock 允许我们通过 verify() 去同时验证函数的多个行为，例如：调用次数、传入参数等。</p>\n</blockquote>\n<h3>Enzyme</h3>\n<blockquote>\n<p>enzyme 是 airbnb 提供的一个用来测试 react 组件的测试工具。由于 enzyme 的 API 是效仿 jQuery 的，所以我们可以按照 jQuery 操作 DOM 的思路去操作我们的 react 组件，进行测试。</p>\n</blockquote>\n<p>enzyme 提供3种基本的使用方法：</p>\n<ul>\n<li><a href=\"https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md\">Shallow Rendering</a></li>\n</ul>\n<blockquote>\n<p>Enzyme 提供的 shallow 方法，可以让你可以把一个组件当做一个测试单元来看待，确保你的测试代码不会间接的去断言子组件的行为。我们可以通过enzyme提供的 API 去操作子组件来达到我们的测试需求。这个让我们很轻松的去测试组件的渲染逻辑是否正确，结合一些API我们还可以轻松的去模拟用户的行为，测试变化后组件的渲染逻辑。</p>\n</blockquote>\n<pre><code class=\"hljs\">import { shallow } from 'enzyme';\n\ndescribe('&lt;MyComponent /&gt;', () =&gt; {\n\n    it('should render `.icon-star` element', () =&gt; {\n        const wrapper = shallow(&lt;MyComponent /&gt;);\n        expect(wrapper.find('.icon-star')).to.have.length(1);\n    });\n\n});</code></pre><p><code>备注</code>：Mocha 不提倡使用箭头函数（arrow function），因为在箭头函数中，this 会自动与当前的作用域进行绑定，并且不允许修改。如果在回调函数中需要使用 this.timeout(1000) 方法时，会发现 this =&gt; undefined。这种情况下请使用普通的匿名函数。</p>\n<ul>\n<li><a href=\"https://github.com/airbnb/enzyme/blob/master/docs/api/mount.md\">JSDOM Full Rendering</a></li>\n</ul>\n<blockquote>\n<p>Enzyme 提供的 mount 方法适用于，当我们的组件需要与 DOM api 进行交互或者需要测试组件的整个完整的生命周期的情况。它的实现是基于 <a href=\"https://github.com/tmpvar/jsdom\">jsdom</a>。</p>\n</blockquote>\n<pre><code class=\"hljs\">import { mount } from 'enzyme';\n\ndescribe('&lt;Foo /&gt;', () =&gt; {\n\n    it('calls componentDidMount', () =&gt; {\n        spy(Foo.prototype, 'componentDidMount');\n        const wrapper = mount(&lt;Foo /&gt;);\n        expect(Foo.prototype.componentDidMount.calledOnce).to.equal(true);\n    });\n\n});</code></pre><ul>\n<li><a href=\"https://github.com/airbnb/enzyme/blob/master/docs/api/render.md\">Static Rendered Markup</a></li>\n</ul>\n<blockquote>\n<p>Enzyme 提供的 render 方法可以把我们的 react 组件渲染成静态的 HTML，render 返回的渲染对象 wrapper 与使用 mount、shallow很相似，但是它是基于一个叫做 <a href=\"https://github.com/cheeriojs/cheerio\">Cheerio</a> 的库。</p>\n</blockquote>\n<pre><code class=\"hljs\">import { render } from 'enzyme';\n\ndescribe('&lt;Foo /&gt;', () =&gt; {\n\n    it('renders three `.foo-bar`s', () =&gt; {\n        const wrapper = render(&lt;Foo /&gt;);\n        expect(wrapper.find('.foo-bar')).to.have.length(3);\n    });\n\n    it('rendered the title', () =&gt; {\n        const wrapper = render(&lt;Foo title=\"unique\" /&gt;);\n        expect(wrapper.text()).to.contain(\"unique\");\n    });\n\n});</code></pre><h3>Istanbul</h3>\n<blockquote>\n<p>Istanbul 是一个帮助我们统计测试覆盖率的工具。</p>\n</blockquote>\n<ul>\n<li>安装 istanbul</li>\n</ul>\n<pre><code class=\"hljs\">npm install istanbul --save-dev</code></pre><ul>\n<li>启动命令</li>\n</ul>\n<pre><code class=\"hljs\">./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha</code></pre><p><code>备注</code>：上面的命令中使用<code>_mocha</code>可以正常输出测试覆盖率的数据，但使用<code>mocha</code>则报<code>No coverage information was collected, exit without writing coverage information</code>。因为，<a href=\"https://github.com/gotwarlost/istanbul/issues/44\">mocha 和 _mocha 是两个不同的命令</a>，前者会新建一个进程执行测试，而后者是在当前进程（即 istanbul 所在的进程）执行测试，只有这样， istanbul 才会捕捉到覆盖率数据。其他测试框架也是如此，必须在同一个进程执行测试。下同。</p>\n<ul>\n<li>为 mocha 传参</li>\n</ul>\n<pre><code class=\"hljs\">./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- test/setupNewUser-spec.js</code></pre><p><code>备注</code>：上面的命令中 <code>--</code> 后面的部分会当做 mocha 的参数被传入，如果不加 <code>--</code> 则会作为 istanbul 的参数。</p>\n<h3>Isparta + Babel</h3>\n<blockquote>\n<p>Isparta + Babel 可以让我们对使用es2015语法的源代码进行测试覆盖率统计。当然，对于使用非es2015语法的代码也是能够正常使用的。</p>\n</blockquote>\n<ul>\n<li>安装 Isparta + Babel</li>\n</ul>\n<pre><code class=\"hljs\">npm install babel-cli isparta --save-dev</code></pre><ul>\n<li>启动命令</li>\n</ul>\n<pre><code class=\"hljs\">./node_modules/.bin/babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha</code></pre><p><code>备注</code>：在运行以上命令时，可能会报下面的提示</p>\n<pre><code class=\"hljs\">Transformation error; return original code\n{ [Error: Line 1: Unexpected token ILLEGAL]\n  lineNumber: 1,\n  description: 'Unexpected token ILLEGAL',\n  index: 0 }</code></pre><p>这个提示并不影响测试代码的运行，但是有强迫症的程序员表示看不得有一个错误提示，可以通过添加一个 <code>.istanbul.yml</code> 文件进行处理（<a href=\"https://github.com/douglasduteil/isparta/issues/47#issuecomment-121014224\">#issues 47</a>）</p>\n<pre><code class=\"hljs\"># .istanbul.yml\ninstrumentation:\n  root: src</code></pre><p>再次运行测试脚本，发现一切都干净了。</p>\n<ul>\n<li>运行结果截图（自行运行 <code>example</code> 目录内的例子或者使用 <a href=\"https://github.com/FrendEr/generator-tman\"><code>generator-tman</code></a> 初始化项目）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/FrendEr/blog/gh-pages/images/post/how-to-an-unit-test/result.png\" alt=\"运行结果\"></p>\n<h2>如何启动一个测试</h2>\n<blockquote>\n<p>以下配置是根据在xxx项目组件需要进行的，技术选型不同配置的方案必然不相同。以下的配置方案是基于：react + es2015。</p>\n</blockquote>\n<h4>配置.babelrc</h4>\n<ul>\n<li>安装依赖包</li>\n</ul>\n<pre><code class=\"hljs\">npm i babel-preset-es2015 babel-preset-react --save-dev</code></pre><ul>\n<li>配置.babelrc</li>\n</ul>\n<pre><code class=\"hljs\">{\n    \"presets\": [\"es2015\", \"react\"]\n}</code></pre><p><code>备注</code>：在 babel 6.0 以后不再只是 es2015 transpiler，同时也支持 jsx 等语法的编译。我们需要安装相关的 presets 去处理我们的需求。</p>\n<h4>测试启动命令</h4>\n<ul>\n<li>安装依赖包</li>\n</ul>\n<pre><code class=\"hljs\">npm i babel-register --save-dev</code></pre><ul>\n<li>执行测试命令</li>\n</ul>\n<pre><code class=\"hljs\">mocha --compilers js:babel-register --recursive</code></pre><p>这里用到了 <code>--compilers js:babel-register</code> —— 允许我们选择编译器，这里对js使用了babel，会自动读取 <code>.babelrc</code> 里面的配置；<code>--recursive</code> —— 会遍历执行test/目录下所有的测试文件。执行 <code>mocha -h</code> 可以查看完整的参数说明。</p>\n<ul>\n<li>为了使用方便，建议配置在 package.json 里面，通过执行 <code>npm test</code> 运行测试</li>\n</ul>\n<pre><code class=\"hljs\">\"scripts\": {\n    \"test\": \"mocha --compilers js:babel-register --recursive\"\n}</code></pre><h4>测试目录以及文件命名</h4>\n<pre><code class=\"hljs\">├── package.json\n├── setupNewUser.js\n└── test\n    └── setupNewUser-spec.js</code></pre><p>上面配置的命令会让 mocha 遍历test/目录下所有的测试文件。在命名上，为了让测试脚本与组件（库）脚本对应起来，一般会这样命名：'组件名字' + '-spec.js' 、 '组件名字' + 'Spec.js'、'组件名字' + '.spec.js'。</p>\n<h2>参考资料</h2>\n<ul>\n<li><a href=\"http://mochajs.org/\">Mocha 官网</a></li>\n<li><a href=\"http://chaijs.com/\">Chai 官网</a></li>\n<li><a href=\"http://sinonjs.org/\">Sinon 官网</a></li>\n<li><a href=\"http://airbnb.io/enzyme/\">Enzyme 官网</a></li>\n<li><a href=\"https://semaphoreci.com/community/tutorials/best-practices-for-spies-stubs-and-mocks-in-sinon-js\">Best Practices for Spies, Stubs and Mocks in Sinon.js</a></li>\n<li><a href=\"https://onsen.io/blog/mocha-chaijs-unit-test-coverage-es6/\">Mocha + Chai.js unit testing for ES6 with Istanbul code coverage</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/06/istanbul.html\">代码覆盖率工具 Istanbul 入门教程</a></li>\n</ul>\n",
  "preview": "用到的测试工具（框架）\n\n> 俗话说：工欲善其事必先利其器。要做好单元测试，必须有一套好的辅助工具。\n\nMocha\n\n> Mocha 是一个可以运行在 node 环境与 browser",
  "dir": "content/posts/2016",
  "base": "02-06-how-to-do-an-unit-test.json",
  "ext": ".json",
  "sourceBase": "02-06-how-to-do-an-unit-test.md",
  "sourceExt": ".md"
}