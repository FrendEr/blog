{
  "layout": "post",
  "title": "移动调试方法总结",
  "description": "Chrome的截屏、Weinre、路由代理、DebugGap",
  "keywords": "debuggap, debug, 移动调试, node-webkit, Weinre, 移动调试方法总结",
  "date": "2015-06-30T22:57:00.000Z",
  "categories": "debug",
  "bodyContent": "最近在公司项目一直做着触屏的项目，这里不是要说项目开发的实际内容，而是调试。说到调试，目前有几种方案：\n\n## 1. Chrome的截屏\n\n在PC上开发触屏项目，目前用得最多而且最方便的调试方式应该是chrome的截屏，支持20+种设备模拟，然并卵，chrome的截屏与实际的移动设备使用情况还是存在许多不一致的地方，导致很多问题在开发时没发现，一到了线上用手机测试就冒了出来😢。所以，chrome截屏并不能用来测试解决多数的兼容性问题。\n\n## 2. Weinre\n\n其实说起weinre，还真不想去提他。吐槽下他的文档，内容说得虽然是够清晰，但是整体样式排版看着真心别扭。[weinre官方文档](http://people.apache.org/~pmuellr/weinre/docs/latest/)。\n\n## 3. 路由代理\n\n这个可以算是用得最舒服的一种方式了，但是前提是有属于你自己或者小组一个路由器随你们玩弄。这种方法就是拥有一个路由器，然后使用一个路由代理将其ip进行映射到你的机器上，例如你PC当前的ip是192.168.190.199，希望映射的域名是hahaha.com，那在路由代理那里进行映射（公司用的是极路由），然后手机连接与PC同一个路由器，再访问hahaha.com就可以访问到本地机器的页面了。当然，这种方式更多是看页面样式、交互一些表面的问题，但例如脚本错误、异常情况等是没办法用这种方法进行测试的。\n\n## 4. DebugGap\n\n[DebugGap](http://www.debuggap.com/)被誉为最强大的webview与浏览器调试工具，建立在[node-webkit](https://github.com/nwjs/nw.js)上。在DebugGap官网下载符合你当前电脑的版本，运行一个app并填入监听的ip以及端口，给需要测试的界面引入一个debuggap.js脚本，便可以开始你的调试。\n\n#### DebugGap使用总结，按照步骤列举如下：\n\n- (1) 到[DebugGap官网](http://www.debuggap.com/)下载应用程序，不需安装，解压即可以用；\n\n- (2) 在需要调试的页面引用debuggap.js，\n\n- (3) 本地需要配置：\n\na) nginx配置\n\nb) host配置\n\nc) 浏览器访问http://frend.cc\n<br/>\n\n##### 访问页面，注意右上角出现的蓝色按钮\n![image](https://frender.github.io/blog/images/post/debuggap/browser-step1.png)\n\n##### 点击蓝色按钮，出现四叶草，选择config连接到debuggap app\n![image](https://frender.github.io/blog/images/post/debuggap/browser-step2.png)\n\n##### 输入ip、ports\n![image](https://frender.github.io/blog/images/post/debuggap/browser-step3.png)\n\nd) debuggap app连接，并调试\n<br/>\n\n##### 连接debuggap，给各个端提供监听对象\n![image](https://frender.github.io/blog/images/post/debuggap/debuggap-step1.png)\n\n##### 获取当前在监听的设备\n![image](https://frender.github.io/blog/images/post/debuggap/debuggap-step2.png)\n\n##### 选择监听的设备，展示控制台\n![image](https://frender.github.io/blog/images/post/debuggap/debuggap-step3.png)\n\n##### 控制台展示网站的静态资源(`注意`右侧显示不支持单步调试提示，这里如果使用android+chrome需要用数据线连接手机与电脑，并手机打开USB调试模式以及开发者选项)\n![image](https://frender.github.io/blog/images/post/debuggap/debuggap-step4.png)\n\n- (4) 以上的模拟场景设备支持为：mac + chrome(截屏)。如果要使用实际的手机设备来测试，需要一个局域网，即上面第三点[路由代理](#路由代理)说的那样，然后进行页面的访问。\n\n- (5) 你以为做完(4)就OK了吗？！NO！！！还有坑！——\n\n`坑一：` IOS8.1.x以上是看不到控制台可以调试的内容，即以下的图展示的内容，看不到！！！\n![image](https://frender.github.io/blog/images/post/debuggap/debuggap-step3.png)\n\n`坑二：`手机必须用USB连接上电脑才可以单步调试，从不知道到知道，我折腾了好久，不要问我是怎么发现的\n\n`坑三：`你用iphone来调试？还想用chrome来访问？呵呵，这里貌似不行，至于为什么，我也不懂。。。\n\n`坑四：`吐槽国内的使用分享文章，清一色抄官网的，细节没说清，导致我经历了以上好多坑\n\n<br/>\n\n## 5. 安卓在chrome上的同步调试\n\n[Remote Debugging on Android with Chrome](https://developer.chrome.com/devtools/docs/remote-debugging)，这个是chrome提供的通过使用安卓设备，在chrome上面进行同步调试的使用教程。亲测之后感觉很方便，需要一台装有chrome的安卓手机，连接到mac上即可同步调试，比4说的[DebugGap](#DebugGap)要好用得多。唯一不好的，就是手机需要通过USB连接mac，不能实现DebugGao那样的一个调试终端，多个远程终端。\n\n<br/>\n\n## 6. iphone与mac在safari上同步调试\n\n既然可以通过安卓手机同步测试，那iphone的话就可以通过使用safari来做同步测试。[iphone与mac在safari上同步调试](http://chon.io/blog/safari-ios-iphone-itouch-web-dev-inspector/)，这个例子可以教你怎样设置iphone与mac，剩下的步骤就非常简单了。\n\n<br/>\n\n## 7. browser-sync\n\n[link](http://www.browsersync.io/)",
  "bodyHtml": "<p>最近在公司项目一直做着触屏的项目，这里不是要说项目开发的实际内容，而是调试。说到调试，目前有几种方案：</p>\n<h2>1. Chrome的截屏</h2>\n<p>在PC上开发触屏项目，目前用得最多而且最方便的调试方式应该是chrome的截屏，支持20+种设备模拟，然并卵，chrome的截屏与实际的移动设备使用情况还是存在许多不一致的地方，导致很多问题在开发时没发现，一到了线上用手机测试就冒了出来😢。所以，chrome截屏并不能用来测试解决多数的兼容性问题。</p>\n<h2>2. Weinre</h2>\n<p>其实说起weinre，还真不想去提他。吐槽下他的文档，内容说得虽然是够清晰，但是整体样式排版看着真心别扭。<a href=\"http://people.apache.org/~pmuellr/weinre/docs/latest/\">weinre官方文档</a>。</p>\n<h2>3. 路由代理</h2>\n<p>这个可以算是用得最舒服的一种方式了，但是前提是有属于你自己或者小组一个路由器随你们玩弄。这种方法就是拥有一个路由器，然后使用一个路由代理将其ip进行映射到你的机器上，例如你PC当前的ip是192.168.190.199，希望映射的域名是hahaha.com，那在路由代理那里进行映射（公司用的是极路由），然后手机连接与PC同一个路由器，再访问hahaha.com就可以访问到本地机器的页面了。当然，这种方式更多是看页面样式、交互一些表面的问题，但例如脚本错误、异常情况等是没办法用这种方法进行测试的。</p>\n<h2>4. DebugGap</h2>\n<p><a href=\"http://www.debuggap.com/\">DebugGap</a>被誉为最强大的webview与浏览器调试工具，建立在<a href=\"https://github.com/nwjs/nw.js\">node-webkit</a>上。在DebugGap官网下载符合你当前电脑的版本，运行一个app并填入监听的ip以及端口，给需要测试的界面引入一个debuggap.js脚本，便可以开始你的调试。</p>\n<h4>DebugGap使用总结，按照步骤列举如下：</h4>\n<ul>\n<li>\n<p>(1) 到<a href=\"http://www.debuggap.com/\">DebugGap官网</a>下载应用程序，不需安装，解压即可以用；</p>\n</li>\n<li>\n<p>(2) 在需要调试的页面引用debuggap.js，</p>\n</li>\n<li>\n<p>(3) 本地需要配置：</p>\n</li>\n</ul>\n<p>a) nginx配置</p>\n<p>b) host配置</p>\n<p>c) 浏览器访问http://frend.cc\n&lt;br/&gt;</p>\n<h5>访问页面，注意右上角出现的蓝色按钮</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/browser-step1.png\" alt=\"image\"></p>\n<h5>点击蓝色按钮，出现四叶草，选择config连接到debuggap app</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/browser-step2.png\" alt=\"image\"></p>\n<h5>输入ip、ports</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/browser-step3.png\" alt=\"image\"></p>\n<p>d) debuggap app连接，并调试\n&lt;br/&gt;</p>\n<h5>连接debuggap，给各个端提供监听对象</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/debuggap-step1.png\" alt=\"image\"></p>\n<h5>获取当前在监听的设备</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/debuggap-step2.png\" alt=\"image\"></p>\n<h5>选择监听的设备，展示控制台</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/debuggap-step3.png\" alt=\"image\"></p>\n<h5>控制台展示网站的静态资源(<code>注意</code>右侧显示不支持单步调试提示，这里如果使用android+chrome需要用数据线连接手机与电脑，并手机打开USB调试模式以及开发者选项)</h5>\n<p><img src=\"https://frender.github.io/blog/images/post/debuggap/debuggap-step4.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>(4) 以上的模拟场景设备支持为：mac + chrome(截屏)。如果要使用实际的手机设备来测试，需要一个局域网，即上面第三点<a href=\"#%E8%B7%AF%E7%94%B1%E4%BB%A3%E7%90%86\">路由代理</a>说的那样，然后进行页面的访问。</p>\n</li>\n<li>\n<p>(5) 你以为做完(4)就OK了吗？！NO！！！还有坑！——</p>\n</li>\n</ul>\n<p><code>坑一：</code> IOS8.1.x以上是看不到控制台可以调试的内容，即以下的图展示的内容，看不到！！！\n<img src=\"https://frender.github.io/blog/images/post/debuggap/debuggap-step3.png\" alt=\"image\"></p>\n<p><code>坑二：</code>手机必须用USB连接上电脑才可以单步调试，从不知道到知道，我折腾了好久，不要问我是怎么发现的</p>\n<p><code>坑三：</code>你用iphone来调试？还想用chrome来访问？呵呵，这里貌似不行，至于为什么，我也不懂。。。</p>\n<p><code>坑四：</code>吐槽国内的使用分享文章，清一色抄官网的，细节没说清，导致我经历了以上好多坑</p>\n<p>&lt;br/&gt;</p>\n<h2>5. 安卓在chrome上的同步调试</h2>\n<p><a href=\"https://developer.chrome.com/devtools/docs/remote-debugging\">Remote Debugging on Android with Chrome</a>，这个是chrome提供的通过使用安卓设备，在chrome上面进行同步调试的使用教程。亲测之后感觉很方便，需要一台装有chrome的安卓手机，连接到mac上即可同步调试，比4说的<a href=\"#DebugGap\">DebugGap</a>要好用得多。唯一不好的，就是手机需要通过USB连接mac，不能实现DebugGao那样的一个调试终端，多个远程终端。</p>\n<p>&lt;br/&gt;</p>\n<h2>6. iphone与mac在safari上同步调试</h2>\n<p>既然可以通过安卓手机同步测试，那iphone的话就可以通过使用safari来做同步测试。<a href=\"http://chon.io/blog/safari-ios-iphone-itouch-web-dev-inspector/\">iphone与mac在safari上同步调试</a>，这个例子可以教你怎样设置iphone与mac，剩下的步骤就非常简单了。</p>\n<p>&lt;br/&gt;</p>\n<h2>7. browser-sync</h2>\n<p><a href=\"http://www.browsersync.io/\">link</a></p>\n",
  "preview": "最近在公司项目一直做着触屏的项目，这里不是要说项目开发的实际内容，而是调试。说到调试，目前有几种方案：\n\n1.",
  "dir": "content/posts/2015",
  "base": "06-30-debug-gap.json",
  "ext": ".json",
  "sourceBase": "06-30-debug-gap.md",
  "sourceExt": ".md"
}