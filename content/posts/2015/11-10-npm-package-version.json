{
  "layout": "post",
  "title": "NPM 版本管理",
  "description": "npm package version description",
  "keywords": "npm, version",
  "date": "2015-11-10T00:00:00.000Z",
  "categories": "npm",
  "bodyContent": "> 在发布与使用npm package的时候，对于package version的定义与使用规则存在疑惑，所以整理了一份文档。这个repo仅作记录与探讨npm包的版本号使用。\n\n> 如果描述中存在错误的地方，望指出。\n\n<br>\n\n\n## Publish package时，x.y.z代表什么？\n\n> x.y.z 对应的表达式是 major.minor.patch\n\n- **v1.0.0 表示 Release(正式发布)** : the project is going to be shared with others, it should start at 1.0.0(Npm rule).\n\n- **v1.0.1 表示 Patch release(补丁发布)** : make some backwards-compatible bug fixes\n\n``` javascript\n\n// npm version cmd\nnpm version patch\n\n// package version changes to\nv1.0.0 ===> v1.0.1\n\n```\n\n- **v1.1.0 表示 Minor release(小迭代版本发布)** : add new features but don't break existing features. It's `backwards compatibility`.\n\n``` javascript\n\n// npm version cmd\nnpm version minor\n\n// package version changes to\nv1.0.1 ===> v1.1.0\n\n```\n\n- **v2.0.0 表示 Major release(主版本发布)** : changes which `break backwards compatibility`.\n\n``` javascript\n\n// npm version cmd\nnpm version major\n\n// package version changes to\nv1.1.0 ===> v2.0.0\n\n```\n\n<br>\n\n\n## Publish package的命令(SemVer)\n\n- **Patch release**\n\n> 执行后x.y.z中的z自动加1\n\n``` javascript\n\nnpm version patch\n\n```\n\n- **Minor release**\n\n> 执行后x.y.z中的y自动加1，z重置为0\n\n``` javascript\n\nnpm version minor\n\n```\n\n- **Major release**\n\n> 执行后x.y.z中的x自动加1，y和z重置为0\n\n``` javascript\n\nnpm version major\n\n```\n\n<br>\n\n\n## Install package时，`常见`的版本号匹配规则\n\n- **>1.0.1**\n\n``` javascript\n\n>1.0.1 (1.0.2, 1.0.3 etc)\n\n```\n\n\n- **>=1.0.1**\n\n``` javascript\n\n>=1.0.1 (1.0.1, 1.0.2, 1.0.3 etc)\n\n```\n\n\n- **<1.0.5**\n\n``` javascript\n\n<1.0.5 (1.0.4, 1.0.3 etc)\n\n```\n\n\n- **<=1.0.5**\n\n``` javascript\n\n<=1.0.5 (1.0.5, 1.0.4, 1.0.3 etc)\n\n```\n\n\n- **>1.2.3-alpha.2**\n\n``` javascript\n\nprerelease version, match 1.2.3-alpha.3, 1.2.3-alpha.4 etc, but not match 4.5.6-alpha.3\n\n```\n\n\n- **1.1.x**\n\n``` javascript\n\n>=1.1.0 && < 1.2.0\n\n```\n\n\n- **~1.1.4**\n\n``` javascript\n\n>=1.1.4 && <1.2.0\n\n```\n\n\n- **^1.1.4**\n\n``` javascript\n\n>=1.1.4 && <2.0.0\n\n```\n\n<br>\n\n\n## 关于~(tilde) 和 ^(caret)\n\n> 从node v0.10.26开始，通过`install --save`安装的模块会使用^(caret)代替~(tilde)。\n\n##### ~(tilde) 和 ^(caret)的匹配规则不同，例如：~1.0.4会在[ >=1.0.4 && <1.1.0 ]中匹配1.0.x的最高版本；^1.0.4会在[ >= 1.0.4 && <2.0.0 ]中匹配1.x.x的最高版本。\n\n<br>\n\n\n## 是否该使用0.y.z这样的版本？\n\n> Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n> ― semver.org\n\n##### 上面是官方的文档说明，意思是由于不是正式发布的版本，模块的API随时可能会被修改，而且可能会不向后兼容，因此模块的API为不稳定的API。\n\n<br>\n\n\n## 参考文档\n\n- [Semantic versioning and npm](https://docs.npmjs.com/getting-started/semantic-versioning) -- **Npm Tutorial**\n\n- [The semantic versioner for npm](https://docs.npmjs.com/misc/semver) -- **Npm Tutorial**\n\n- [**npm install --save** No Longer Using Tildes](http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/) --  **@FredKSchott**",
  "bodyHtml": "<blockquote>\n<p>在发布与使用npm package的时候，对于package version的定义与使用规则存在疑惑，所以整理了一份文档。这个repo仅作记录与探讨npm包的版本号使用。</p>\n</blockquote>\n<blockquote>\n<p>如果描述中存在错误的地方，望指出。</p>\n</blockquote>\n<p>&lt;br&gt;</p>\n<h2>Publish package时，x.y.z代表什么？</h2>\n<blockquote>\n<p>x.y.z 对应的表达式是 major.minor.patch</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>v1.0.0 表示 Release(正式发布)</strong> : the project is going to be shared with others, it should start at 1.0.0(Npm rule).</p>\n</li>\n<li>\n<p><strong>v1.0.1 表示 Patch release(补丁发布)</strong> : make some backwards-compatible bug fixes</p>\n</li>\n</ul>\n<pre><code class=\"hljs\">// npm version cmd\nnpm version patch\n\n// package version changes to\nv1.0.0 ===&gt; v1.0.1</code></pre><ul>\n<li><strong>v1.1.0 表示 Minor release(小迭代版本发布)</strong> : add new features but don't break existing features. It's <code>backwards compatibility</code>.</li>\n</ul>\n<pre><code class=\"hljs\">// npm version cmd\nnpm version minor\n\n// package version changes to\nv1.0.1 ===&gt; v1.1.0</code></pre><ul>\n<li><strong>v2.0.0 表示 Major release(主版本发布)</strong> : changes which <code>break backwards compatibility</code>.</li>\n</ul>\n<pre><code class=\"hljs\">// npm version cmd\nnpm version major\n\n// package version changes to\nv1.1.0 ===&gt; v2.0.0</code></pre><p>&lt;br&gt;</p>\n<h2>Publish package的命令(SemVer)</h2>\n<ul>\n<li><strong>Patch release</strong></li>\n</ul>\n<blockquote>\n<p>执行后x.y.z中的z自动加1</p>\n</blockquote>\n<pre><code class=\"hljs\">npm version patch</code></pre><ul>\n<li><strong>Minor release</strong></li>\n</ul>\n<blockquote>\n<p>执行后x.y.z中的y自动加1，z重置为0</p>\n</blockquote>\n<pre><code class=\"hljs\">npm version minor</code></pre><ul>\n<li><strong>Major release</strong></li>\n</ul>\n<blockquote>\n<p>执行后x.y.z中的x自动加1，y和z重置为0</p>\n</blockquote>\n<pre><code class=\"hljs\">npm version major</code></pre><p>&lt;br&gt;</p>\n<h2>Install package时，<code>常见</code>的版本号匹配规则</h2>\n<ul>\n<li><strong>&gt;1.0.1</strong></li>\n</ul>\n<pre><code class=\"hljs\">&gt;1.0.1 (1.0.2, 1.0.3 etc)</code></pre><ul>\n<li><strong>&gt;=1.0.1</strong></li>\n</ul>\n<pre><code class=\"hljs\">&gt;=1.0.1 (1.0.1, 1.0.2, 1.0.3 etc)</code></pre><ul>\n<li><strong>&lt;1.0.5</strong></li>\n</ul>\n<pre><code class=\"hljs\">&lt;1.0.5 (1.0.4, 1.0.3 etc)</code></pre><ul>\n<li><strong>&lt;=1.0.5</strong></li>\n</ul>\n<pre><code class=\"hljs\">&lt;=1.0.5 (1.0.5, 1.0.4, 1.0.3 etc)</code></pre><ul>\n<li><strong>&gt;1.2.3-alpha.2</strong></li>\n</ul>\n<pre><code class=\"hljs\">prerelease version, match 1.2.3-alpha.3, 1.2.3-alpha.4 etc, but not match 4.5.6-alpha.3</code></pre><ul>\n<li><strong>1.1.x</strong></li>\n</ul>\n<pre><code class=\"hljs\">&gt;=1.1.0 &amp;&amp; &lt; 1.2.0</code></pre><ul>\n<li><strong>~1.1.4</strong></li>\n</ul>\n<pre><code class=\"hljs\">&gt;=1.1.4 &amp;&amp; &lt;1.2.0</code></pre><ul>\n<li><strong>^1.1.4</strong></li>\n</ul>\n<pre><code class=\"hljs\">&gt;=1.1.4 &amp;&amp; &lt;2.0.0</code></pre><p>&lt;br&gt;</p>\n<h2>关于~(tilde) 和 ^(caret)</h2>\n<blockquote>\n<p>从node v0.10.26开始，通过<code>install --save</code>安装的模块会使用^(caret)代替~(tilde)。</p>\n</blockquote>\n<h5>~(tilde) 和 ^(caret)的匹配规则不同，例如：~1.0.4会在[ &gt;=1.0.4 &amp;&amp; &lt;1.1.0 ]中匹配1.0.x的最高版本；^1.0.4会在[ &gt;= 1.0.4 &amp;&amp; &lt;2.0.0 ]中匹配1.x.x的最高版本。</h5>\n<p>&lt;br&gt;</p>\n<h2>是否该使用0.y.z这样的版本？</h2>\n<blockquote>\n<p>Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n― semver.org</p>\n</blockquote>\n<h5>上面是官方的文档说明，意思是由于不是正式发布的版本，模块的API随时可能会被修改，而且可能会不向后兼容，因此模块的API为不稳定的API。</h5>\n<p>&lt;br&gt;</p>\n<h2>参考文档</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\">Semantic versioning and npm</a> -- <strong>Npm Tutorial</strong></p>\n</li>\n<li>\n<p><a href=\"https://docs.npmjs.com/misc/semver\">The semantic versioner for npm</a> -- <strong>Npm Tutorial</strong></p>\n</li>\n<li>\n<p><a href=\"http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/\"><strong>npm install --save</strong> No Longer Using Tildes</a> --  <strong>@FredKSchott</strong></p>\n</li>\n</ul>\n",
  "preview": "在发布与使用npm package的时候，对于package version的定义与使用规则存在疑惑，所以整理了一份文档。这个repo仅作记录与探讨npm包的版本号使用。\n\n>",
  "dir": "content/posts/2015",
  "base": "11-10-npm-package-version.json",
  "ext": ".json",
  "sourceBase": "11-10-npm-package-version.md",
  "sourceExt": ".md"
}