---
layout: post
title:  "html5 data-* 自定义属性的使用"
description: "html5增加了自定义属性，通过data-*的形式进行定义，当我们使用jQuery的API去操作自定义属性的时候需要区分data()与attr()。"
keywords: "html5, jquery, api, data-*, 自定义属性"
date:   2015-01-26 00:04:30
categories: blog
---

###1. html5自定义属性data-*

html5提供了自定义属性，使用规则为`data-attribute-name = value`

>####1.1 操作自定义属性

html
{% highlight html %}
<p id="sunflower" data-leaves="32" data-plant-height="2.0m"></p>
{% endhighlight %}
javascript
{% highlight javascript %}
var plant = document.getElementById('sunflower');
var leaves = plant.dataset.leaves; // leaves = 32;
var tallness = plant.dataset.plantHeight; // 'plant-height' -> 'plantHeight'
plant.dataset.plantHeight = '3.6m'; // reset plant-height
{% endhighlight %}

`注意点` 自定义属性单词间不能使用驼峰式写法，单词间需要使用`-`中横线进行分割，在操作自定义属性时，则使用驼峰式写法（规则与JS中样式的操作相似）

<br/>

###2. jQuery的缓存机制

这里之所以要讲jQuery的缓存机制，全因jQuery的data()函数。关于data()函数的介绍与使用，将在下个小节介绍，同时会结合attr()函数进行说明。

>####2.1 jQuery对数据的缓存

`问题场景` 在实现一些逻辑功能，例如动画的时候，会涉及很多数据的缓存，其中一种处理方法是在DOM元素上添加自定义属性来保存数据，这样可以很方便的访问到数据队列。但是给DOM元素添加过多的自定义属性和数据可能会引起内存泄漏，特别是在旧版本的IE浏览器下，所以尽量要避免这样干。

`解决思路` 使用js对象进行数据的缓存，通过唯一的ID将DOM元素与数据对应起来。

`jQuery缓存的实现` jQuery在1.2.3后引入了jQuery.data（数据缓存系统），提供了data方法来存储数据（removeData用来删除数据），如下代码片段（1.6.1）：
{% highlight javascript %}
jQuery.extend({
    cache: {},
    uuid: 0,
    expando: '',
    ...
});
{% endhighlight %}

__jQuery.cache__ 空对象，用来缓存。

__jQuery.uuid__ 自增唯一的数字。

__jQuery.expando__ 字符串，使用Math.random生成，去掉了非数字字符。它作为HTMLElement或JS对象的属性名。如下代码片段：

html
{% highlight html %}
<p id="sunflower" jQuery1502102101></p>
{% endhighlight %}

jQuery
{% highlight javascript %}
expando: 'jQuery' + ( jQuery.fn.jquery + Math.random() ).replace(/\D/g, ''),
{% endhighlight %}

<br/>

###3. jQuery.fn.data()与jQuery.fn.attr()

>####3.1 jQuery的data()方法

jQuery.fn.data(name[, value])是一个getter/setter方法。

html
{% highlight html %}
<p id="sunflower" data-leaves="42"></p>
{% endhighlight %}

javascript
{% highlight javascript %}
var leaves = $('#sunflower').data('leaves'); //42，data()方法会先去jQuery.cache读取data-leaves的值，读取不到，便读取html5的dataset数据并挂载到jQuery.cache中。
$('#sunflower').data('plant-height', '3.6m'); //data-leavesplant-height=3.6m 存储在jQuery.cache里，DOM元素依然显示为<p id="sunflower" data-leaves="42"></p>
{% endhighlight %}

>####3.2 jQuery的attr()方法

jQuery.fn.attr(name[, value])也是一个getter/setter方法。

html
{% highlight html %}
<p id="sunflower" data-leaves="42"></p>
{% endhighlight %}

javascript
{% highlight javascript %}
var leaves = $('#sunflower').attr('data-leaves'); //42，attr()方法直接获取DOM元素的data-leaves属性的值
$('#sunflower').attr('plant-height', '3.6m'); //DOM元素变为<p id="sunflower" data-leaves="42" data-plant-height="3.6m"></p>
{% endhighlight %}

>####3.3 jQuery的data()与attr()比较

从3.1、3.2中可以看到，data()方法其实是操作jQuery.cache，而attr()方法则是直接操作DOM元素的属性，那么两者会互相影响吗？

html
{% highlight html %}
<p id="sunflower" data-leaves="42"></p>
{% endhighlight %}

javascript
{% highlight javascript %}
$('#sunflower').data('leaves', 44);	//data()方法将data-leaves的值44加入了jQuery.cache中
var leaves = $('#sunflower').attr('data-leaves'); //42，attr()方法直接获取DOM元素的data-leaves属性的值
$('#sunflower').data('leaves'); //44
{% endhighlight %}









